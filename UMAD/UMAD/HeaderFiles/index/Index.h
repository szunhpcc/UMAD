#ifndef INDEX_H

#define INDEX_H

#include "../metricdata/MetricData.h"

#include "../metricdistance/MetricDistance.h"

#include "query/Query.h"
#include <list>



#include <memory>


//#include <log4cplus/logger.h>

//#include <log4cplus/configurator.h>

//#include <log4cplus/helpers/loglog.h>

//#include <log4cplus/helpers/stringhelper.h>

//#include <log4cplus/loggingmacros.h>



using namespace std;

//using namespace log4cplus;

//using namespace log4cplus::helpers;





/** @file Index.h

 * @classes about index

 * @author Fuli Lei

 * @version 2012-12-09

*/





/**

* @class CIndex

* @brief abstract class about index structure

* @author Fuli Lei

*

* This abstract class is the primary interface for distance-based index. 

* users can build a database index or read a pre-build index from a file,

* then do the search.

*/



class CIndex
{

public:

	/**none parameter constructor*/

	CIndex();

	/**this pure virtual funciton need to be implemented by the same function in its derived class,

		then users can use it to create a index



		@param[in] objectList this is vector contains all the objects of a index structure built later

	*/
	virtual void bulkLoad(vector<std::shared_ptr<CMetricData> > &objectList,int buildMode,int threadNum)=0;



	/**this is a pure virtual function 

	    users can use it to search out what they want after this

		pure virtual function is implemented in the derived class



		@param[in] q this object package some information used to do the search

		@return this function will return a vector consists of all objects generated by this function. 

	*/

	virtual list<shared_ptr<CMetricData> >* search(CQuery* q)=0;



	/**this is a pure virtual function 

		users can get all the data objects residing in the index structure use the 

		same function, which implementes this pure virtual function, in the derived class of this abstract base class

        @return return objects list container which all the address of the data objects.

	*/

	virtual vector<shared_ptr<CMetricData> > getAllDataPoints()=0;

	

	/**@brief get the metric object of a index structure

      *@return the member varible metric,which is used to calculate the distance of two data objects

    */

	virtual CMetricDistance* getMetric()=0;



	/**when this pure function is implemented in the derived class,users can get the number of object residing in 

	    the index structure built before

        @return return the number of data objects

	*/

	virtual int size()=0;



	/**Write a index previously built to a file stored in outside memory. This function must be implemented in anvance before being called

		@param out a class boost::serialization::text_oarchive object, which will be used to out put the index built before. 

	*/

	

    virtual void setDataType(string dataType);



    virtual string getDataType();



    virtual void setFileName(string fileName);



    virtual string getFileName();



    virtual ~CIndex();



protected:



    string fileName;

    string dataType;



	//Logger loggerObj;

};



#endif